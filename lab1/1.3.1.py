#1.3.1. Опишіть класи для таких геометричних фігур зазначених нижче: 
#• Трикутник – визначається довжинами трьох сторін.
#• Прямокутник – визначається двома сторонами
#• Трапеція – визначається двома основами та двома бічними сторонами.
#• Паралелограм – визначається двома сторонами та висотою.
#• Круг – визначається радіусом.
#У кожному з класів реалізуйте операції знаходження периметра (для кола 
#– довжини кола) та площі. За допомогою цих класів розв’яжіть таку задачу: 
#Задано список фігур вищенаведених класів. Серед заданих фігур знайдіть 
#фігуру, що має найбільшу площу та периметр.
#Перелік фігур зберігається у текстовому файлі – у кожному окремому рядку 
#файла вказується назва фігури та список параметрів, що визначають фігуру 
#відповідно до зазначеного вище. Параметри розділені одним або кількома 
#символами пропуску. Назви фігур вказані таким чином: Triangle – Трикутник, 
#Rectangle – Прямокутник, Trapeze – Трапеція, Parallelogram – Паралелограм, 
#Circle – Круг.                            
#Вхідні дані містяться файлах
#input01.txt
#input02.txt
#input03.txt
#за посиланням




#терміналогія
#№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№ Клас (class) — тип, що визначає структуру об'єктів, які належать до нього.
#№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№ Об'єкт (object) — екземпляр класу, що має конкретні значення атрибутів.
#№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№ Ініціалізація (initialization) — (установка первоначальних свойств)
# ряд дій, що передують виконанню програми, зокрема,
# встановлення програмних змінних в нуль, або надання їм інших початкових значень.
#№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№ поліморфізм (polymorphism) — властивість системи виводити по-різному залежно від контексту.
#№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№ інкапсуляція (encapsulation) — об'єднання даних і методів, що працюють з ними, в одному класі.
#спадкування (inheritance) — можливість створення нового класу на основі вже існуючого класу.
#абстракція (abstraction) — виділення головних характеристик об'єкта, відкидаючи другорядні.
#конструктор (constructor) — метод класу, що викликається автоматично при створенні об'єкта класу.
#деструктор (destructor) — метод класу, що викликається автоматично при знищенні об'єкта класу.
#атрибут (attribute) — змінна, що визначена в класі.
#метод (method) — функція, що визначена в класі.
#екземпляр (instance) — об'єкт класу.
#екземплярний атрибут (instance attribute) — атрибут, що визначений в екземплярі класу.
#класовий атрибут (class attribute) — атрибут, що визначений в класі.
#екземплярний метод (instance method) — метод, що визначений в класі і працює з екземпляром класу.
#класовий метод (class method) — метод, що визначений в класі і працює з класом.
#статичний метод (static method) — метод, що визначений в класі і не працює з екземпляром класу.
#спеціальний метод (special method) — метод, що визначений в класі і викликається автоматично в певних ситуаціях.
import math
import os # Імпортуємо модуль os для роботи з операційною системою

class Triangle:
    def __init__(self, a, b, c):
        self.a = a # Ініціалізація об'єкта класу Triangle сторона трикутника
        self.b = b
        self.c = c
        
        if not self.is_valid():
            raise ValueError("Трикутник із такими сторонами не існує") # Перевірка чи існує трикутник з такими сторонами
    
    def is_valid(self):
        return self.a + self.b > self.c and self.a + self.c > self.b and self.b + self.c > self.a   # Перевірка чи існує трикутник з такими сторонами
    def perimeter(self):  # Метод для обчислення периметра
        self.a + self.b + self.c     # Периметр трикутника
        print(f"++++++++++++++++++++++++++++++++Периметр трикутника = {self.perimeter()}")
    
    def area(self):  # Метод для обчислення площі трикутника
        s = self.perimeter() / 2
        math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c)) # Площа трикутника
        print(f"++++++++++++++++++++++++++++++++Площа трикутника = {self.area()}")
#приклад з посібника
#class Triangle:
 #def __init__(self, a, b, c):
 
 # перевіримо чи можна створити такий трикутник
   # assert a + b > c and a + c > b and c + b > a
   # self.a = a # поле a - перша сторона трикутника
  #  self.b = b # поле b - друга сторона трикутника
  #  self.c = c # поле c - третя сторона трикутника

 #def perimeter(self):
 
 # периметр це сума сторін трикутника
 #   return self.a + self.b + self.c
 #def square(self):
 #   p = self.perimeter() / 2.0 # обчислимо півпериметр
 #   res = p * (p - self.a) * (p - self.b) * (p - self.c)
 #   return res ** 0.5
#t = Triangle(3, 4, 5)
#print("Площа заданого трикутника = %f" % t.square())




class Parallelogram:
    def __init__(self, base, side, height):
        self.base = base # база паралелограма
        self.side = side # сторона паралелограма
        self.height = height # висота паралелограма
    
    def perimeter(self):  # Метод для обчислення периметра
        2 * (self.base + self.side) # Периметр паралелограма
        print(f"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Периметр паралелограма = {self.perimeter()}")
    def area(self):  # Метод для обчислення площі паралелограма
        self.base * self.height # Площа паралелограма
        print(f"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Площа паралелограма = {self.area()}")

class Circle:
    def __init__(self, radius):  # Ініціалізація об'єкта класу Circle
        self.radius = radius  # Збереження радіуса кола
    
    def perimeter(self):  # Метод для обчислення довжини кола
        2 * math.pi * self.radius # Довжина кола
        print(f"()()()()()()()()()()()()()Довжина кола = {self.perimeter()}")
    def area(self):  # Метод для обчислення площі кола
        math.pi * self.radius ** 2   # Площа кола
        print(f"()()()()()()()()()()()()()Площа кола = {self.area()}")
    def __str__(self):  # Метод для виведення рядкового представлення об'єкта
        return f"Circle(radius={self.radius})" # Рядкове представлення об'єкта

########################################################################################################################################


def read_numbers_from_file(file_name): # Функція для зчитування чисел з файлу
    try: # Захоплюємо винятки, якщо вони виникають
        with open(file_name, 'r') as file:
            lines = file.readlines()
            if not lines:
                print(f"Файл {file_name} порожній.")
                return []
            shape_type = lines[0].strip()
            numbers = [float(x) for line in lines[1:] for x in line.split()] # Відкриваємо файл для читання
            if numbers == 'Parallelogram'and len(numbers) == 3:
                p = Parallelogram()
                print(f"Parallelogram: {p}")
            elif numbers == 'Triangle'and len(numbers) == 3:
                t = Triangle()
                print(f"Parallelogram: {t}")
            elif numbers == 'Circle'and len(numbers) == 1:
                c = Circle()
                print(f"Parallelogram: {c}")
            else:
                print("Невідомий тип фігури (#_#)")
        print(f"Файл {file_name} містить числа: {numbers}")  # Виводимо зчитані числа
        return numbers # Повертаємо зчитані числа
    except (FileNotFoundError, PermissionError): # Обробляємо винятки
        print(f"Не вдалося відкрити файл (#_#): {file_name}")     # Виводимо повідомлення про помилку
        return [] # Повертаємо порожній список
    except ValueError:  # Обробляємо винятки
        print(f"У файлі {file_name} є недійсні числа(#_#).") # Виводимо повідомлення про помилку
        return [] # Повертаємо порожній список

def sum_numbers_from_files(content_file): # Функція для підсумовування чисел з файлів
    """Підсумовує всі числа з файлів, перерахованих у вказаному файлі."""
    if not os.path.exists(content_file): # Перевіряємо чи існує файл
        print(f"Файл {content_file} не знайдено!") # Виводимо повідомлення про помилку
        return 0.0

    total_sum = 0.0
    try:
        with open(content_file, 'r') as file: # Відкриваємо файл для читання
            for file_name in file: # Читаємо кожен рядок файлу
                file_name = file_name.strip() # Видаляємо пробіли з початку та кінця рядка
                print(f"Зчитано файл: {file_name}") # Виводимо повідомлення про зчитаний файл
                numbers = read_numbers_from_file(file_name) # Зчитуємо числа з файлу
                total_sum += sum(numbers) # Додаємо числа до загальної суми
    except (FileNotFoundError, PermissionError): # Обробляємо винятки
        print(f"Не вдалося відкрити файл(#_#): {content_file}")
    
    return total_sum # Повертаємо загальну суму чисел

# Основна програма
content_file = input("Введіть ім'я файлу зі списком файлів: ") # Запитуємо ім'я файлу зі списком файлів
result = sum_numbers_from_files(content_file) # Підсумовуємо числа з файлів

print(f"Загальна сума чисел з файлів: {result}")
